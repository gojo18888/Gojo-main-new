const axios = require('axios');
const config = require('../settings')
const { cmd, commands } = require('../lib/command')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions')
const fg = require('api-dylux');

const oce = "`"
const oce3 = "```"
const oce2 = '*'
const pk = "`("
const pk2 = ")`"

const baseUrl = "https://my-api-8v32.vercel.app//";
const apiKey = "";
// ============================= L A N G U A G E =============================
const errorReact = "‚ùå";

var errorMg, notFoundMg, sendMg, mvMg;

if (config.LANG === 'SI') {
    errorMg = '*‡∂Ø‡∑ù‡∑Å‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‚ùå*';
    notFoundMg = '*‡∂∏‡∂ß ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫ üìõ*';
    sendMg = '*‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì ‚úÖ*';
    mvMg = '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ß ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫‡∑ö ‡∂±‡∂∏ ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± ‚ùì*';
} else if (config.LANG === 'TA') {
    errorMg = '*‡Æí‡Æ∞‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ, ‡Æ™‡Æø‡Æ©‡Øç‡Æ©‡Æ∞‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‚ùå*';
    notFoundMg = '*‡Æé‡Æ©‡Øç‡Æ©‡Ææ‡Æ≤‡Øç ‡Æé‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà üìõ*';
    sendMg = '*‡Æï‡Øã‡Æ™‡Øç‡Æ™‡ØÅ ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æï ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ ‚úÖ*';
    mvMg = '*‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øà ‡Æï‡ØÇ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‚ùì*';
} else if (config.LANG === 'HI') {
    errorMg = '*‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§π‡•Å‡§à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç ‚ùå*';
    notFoundMg = '*‡§Æ‡•Å‡§ù‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ üìõ*';
    sendMg = '*‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡•Ä ‡§ó‡§à ‚úÖ*';
    mvMg = '*‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§´‡§ø‡§≤‡•ç‡§Æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§Ç ‚ùì*';
} else {
    errorMg = '*An error occurred, please try again later ‚ùå*';
    notFoundMg = '*I couldn\'t find anything. üìõ*';
    sendMg = '*File sent successfully ‚úÖ*';
    mvMg = '*Please give me the movie name ‚ùì*';
}


//=====================================================================================================================
function formatNumber(num) {
    return String(num).padStart(2, '0');
}

async function uploadFile(url, type, from, jid, nmf, quality, mek, conn) {
    try {
        const up_mg = await conn.sendMessage(from, { text: 'Uploading Your Request Video..‚¨Ü' }, { quoted: mek });
        await conn.sendMessage(from, { react: { text: '‚¨Ü', key: mek.key } });

        if(url.includes("https://drive.usercontent.google.com/")) url = url.replace("https://drive.usercontent.google.com/", "https://drive.google.com/")

        let bufferdata, mime, fileName;
        if (type === "gdrive") {
            let res = await fg.GDriveDl(url);
            bufferdata = { url: res.downloadUrl };
            mime = res.mimetype;
            fileName = `${nmf || res.fileName}.${mime.includes("mkv") ? "mkv" : "mp4"}`;
        } else if (type === "direct") {
            bufferdata = await getBuffer(url);
            const fileType = await import('file-type');
            const fileData = await fileType.fromBuffer(bufferdata);
            mime = fileData ? fileData.mime : 'video/mp4';
            fileName = `${nmf}.${mime.split('/')[1]}`;
        } else {
            throw new Error("Invalid download type");
        }

        var quoted = mek
        if(from !== jid) quoted = false

        await conn.sendMessage(jid, {
            document: bufferdata,
            fileName,
            mimetype: mime,
            caption: `${nmf}\n\`${quality}\`\n\n> ${config.FOOTER}`
        }, { quoted });

        await conn.sendMessage(from, { react: { text: '‚úîÔ∏è', key: mek.key } });
        await conn.sendMessage(from, { delete: up_mg.key });
        if(jid !== from){
        await conn.sendMessage(from, { text: sendMg }, { quoted: mek })
        }
      
    } catch (error) {
        console.log(error)
        const em = await conn.sendMessage(from, { text: errorMg }, { quoted: mek });
        await conn.sendMessage(from, { react: { text: '‚ùå', key: em.key } });
    }
}

//===============================================================================================================================


cmd({
    pattern: "cinesubzt",
    alias: ["mv","cine"],
    react: "üé•",
    desc: "Download movie for cinesubz.lk",
    category: "download",
    use: 'cinesubz < Movie Name >',
    filename: __filename
},
async (conn, m, mek, { from, q, reply, creator, backup, msr }) => {
    try {
        if (!q) return await reply(mvMg);

        const cineSearch = await fetchJson(`${baseUrl}/api/movie/cinesubz/search?q=${q}&apikey=${apiKey}`);
      
        if (!cineSearch.data) {
            const error = await conn.sendMessage(from, { text: notFoundMg }, { quoted: mek })
            await conn.sendMessage(from, { react: { text: errorReact, key: error.key } });
            return
        }


        const cineRes = cineSearch.data?.movies || [];

        if (cineRes.length === 0) {
            return await reply(`No results found for: ${q}`);
        }

        let info = `üé• *ùñ∏ùñ†ùñ≤ùñ®ùñ∏ùñ†-ùñ¨ùñ£ ùñ¨ùñÆùñµùñ®ùñ§ ùñ≤ùñ§ùñ†ùñ±ùñ¢ùñß ùñ≤ùñ∏ùñ≤ùñ≥ùñ§ùñ¨* üé•\n\n`;

        info += `*üîç Search Results For:* ${q}\n\n`;
        cineRes.forEach((result, index) => {
            info += `*${formatNumber(index + 1)} ||* ${result.title.replace(/Sinhala Subtitles \| ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂∏‡∂ü/g , '').replace('Sinhala Subtitle | ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂∏‡∂ü' , '')}\n`;
        });

        info += `\n> ${config.FOOTER}`
        const sentMsg = await conn.sendMessage(from, { image: { url: config.LOGO }, text: info }, { quoted: mek });
        const messageID = sentMsg.key.id;
        await conn.sendMessage(from, { react: { text: 'üé•', key: sentMsg.key } });

        conn.ev.on('messages.upsert', async (messageUpdate) => {
            const mekInfo = messageUpdate?.messages[0];
            if (!mek.message) return;
            const messageType = mekInfo?.message?.conversation || mekInfo?.message?.extendedTextMessage?.text;
            const from = mekInfo?.key?.remoteJid;

            const isReplyToSentMsg = mekInfo?.message?.extendedTextMessage?.contextInfo?.stanzaId === messageID;
            if (isReplyToSentMsg) {
                   try{
                let selectedEpIndex = parseInt(messageType.trim()) - 1;

                       // S E L E C T - O P T I O N
                if (selectedEpIndex >= 0 && selectedEpIndex < cineRes.length) {
                    const selectedMovie = cineRes[selectedEpIndex];
                    await conn.sendMessage(from, { react: { text: 'üé•', key: mekInfo.key } });
                    const cineMovie = await fetchJson(`${baseUrl}/api/movie/cinesubz/movie?url=${selectedMovie.link}&apikey=${apiKey}`);
                    if (!cineMovie.data) {
                    const error = await conn.sendMessage(from, { text: notFoundMg }, { quoted: mek })
                    await conn.sendMessage(from, { react: { text: errorReact, key: error.key } });
                    return
                    }
                  
                    const movieData = cineMovie.data;

                    let optionsMsg = `üé¨ *ùñ∏ùñ†ùñ≤ùñ®ùñ∏ùñ†-ùñ¨ùñ£ MOVIE DOWNLOAD SYSTEM* üé¨\n\n`;
                    optionsMsg += `${oce2}‚ñ´ üéûÔ∏è Title:${oce2} ${movieData.title || 'N/A'}\n`;
                    optionsMsg += `${oce2}‚ñ´ üìÖ Release Date:${oce2} ${movieData.date || 'N/A'}\n`;
                    optionsMsg += `${oce2}‚ñ´ üåç Country:${oce2} ${movieData.country || 'N/A'}\n`;
                    optionsMsg += `${oce2}‚ñ´ ‚è± Duration:${oce2} ${movieData.duration || 'N/A'}\n`;
                    optionsMsg += `${oce2}‚ñ´ üñáÔ∏è Movie Link:${oce2} ${selectedMovie.link}\n`;
                    optionsMsg += `${oce2}‚ñ´ üéÄ Categories:${oce2} ${movieData.category || 'N/A'}\n`;
                    optionsMsg += `${oce2}‚ñ´ ü§µ Director:${oce2} ${movieData.director || 'N/A'}\n\n`;
                    optionsMsg += `‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ\n\n`

                    optionsMsg += `*${formatNumber(1)} ||* Details Card\n*${formatNumber(2)} ||* Send Images\n\n`;
                    movieData.downloadUrl.forEach((movie, index) => {
                        optionsMsg += `*${formatNumber(index + 3)} ||* ${movie.quality} [ ${movie.size} ]\n`;
                    });

                    optionsMsg += `\n\n> ${config.FOOTER}`
                    
                    const optMsg = await conn.sendMessage(from, { text: optionsMsg }, { quoted: mekInfo });
                    const optionsMessageID = optMsg.key.id;

                    conn.ev.on('messages.upsert', async (optionUpdate) => {
                        const mekOpt = optionUpdate.messages[0];
                        if (!mekOpt.message) return;
                        const optMessageType = mekOpt.message.conversation || mekOpt.message.extendedTextMessage?.text;
                        const fromOpt = mekOpt.key.remoteJid;

                        const isReplyToOptionsMsg = mekOpt?.message?.extendedTextMessage?.contextInfo?.stanzaId === optionsMessageID;
                        if (isReplyToOptionsMsg) {

                            let parts = optMessageType.trim().split(" ");
                            let optSelected = parts[0]; // First part (command or option)
                            let jid = parts.length > 1 ? parts[1].trim() : ""; // Second part (JID) if available

                            // Validate and correct JID format
                            if (!jid || (!jid.endsWith("@s.whatsapp.net") && !jid.endsWith("@g.us"))) {
                                jid = fromOpt; // Default to fromOpt if JID is invalid
                            }

                            // Attempt to extract quality option safely
                            let selectedQuality = isNaN(parseInt(optSelected)) ? -1 : parseInt(optSelected) - 3;


                            // S E N D - D E T A I L S
                            if (optSelected === "1") {
                                    try{
                                        
                                await conn.sendMessage(fromOpt, { react: { text: 'üé•', key: mekOpt.key } });

                                let movImg = movieData.mainImage.replace("fit=", "fit") || movieData.images[0] || movieData.image || config.LOGO
                                let cast = (movieData.cast || []).map(i => i.actor.name || i.name).join(', ');

                                const mvInfo = `üçü _*${movieData.title || 'N/A'}*_\n\n` +
                                               `üßø ${oce}Release Date:${oce} ‚ûú ${movieData.dateCreate || 'N/A'}\n\n` +
                                               `üåç ${oce}Country:${oce} ‚ûú ${movieData.country || 'N/A'}\n\n` +
                                               `‚è±Ô∏è ${oce}Duration:${oce} ‚ûú ${movieData.duration || 'N/A'}\n\n` +
                                               `üéÄ ${oce}Categories:${oce} ‚ûú ${movieData.category || 'N/A'}\n\n` +
                                               `‚≠ê ${oce}IMDB:${oce} ‚ûú ${movieData.imdb.value || 'N/A'}\n\n` +
                                               `ü§µ‚Äç‚ôÇÔ∏è ${oce}Director:${oce} ‚ûú ${movieData.director.name || 'N/A'}\n\n` +
                                               `üïµÔ∏è‚Äç‚ôÇÔ∏è ${oce}Cast:${oce} ‚ûú ${cast || 'N/A'}\n\n` +
                                               `‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÉ\n\n` +
                                               `   üíÉ *Follow us ‚û¢* https://whatsapp.com/channel/0029VaaPfFK7Noa8nI8zGg27\n\n` +
                                               `${config.FOOTER}`;

                                await conn.sendMessage(jid, {
                                    image: { url: movImg || config.LOGO },
                                    caption: mvInfo
                                });

                                    await conn.sendMessage(fromOpt, { react: { text: '‚úîÔ∏è', key: mekOpt.key } });
                                    if(jid !== fromOpt){
                                        await conn.sendMessage(fromOpt, { text: sendMg }, { quoted: mek })
                                    }
                                    
                                    } catch (e) {
                                        console.log(e)
                                        const em = await conn.sendMessage(from, { text: errorMg }, { quoted: mek });
                                        await conn.sendMessage(from, { react: { text: '‚ùå', key: em.key } });
                               }

                            // S E N D - I M A G E S
                            } else if (optSelected === "2") {
                                   try{
                                await conn.sendMessage(fromOpt, { react: { text: '‚¨áÔ∏è', key: mekOpt.key } });

                                const images = movieData.images || [];
                                for (let img of images) {
                                    await conn.sendMessage(jid, { image: { url: img } });
                                }
                                    await conn.sendMessage(fromOpt, { react: { text: '‚úîÔ∏è', key: mekOpt.key } });
                                   } catch (e) {       
                                    console.log(e)
                                    const em = await conn.sendMessage(from, { text: errorMg }, { quoted: mekOpt });
                                    await conn.sendMessage(from, { react: { text: '‚ùå', key: em.key } });
                                 }
                                
                                // D O W N L O A D
                             } else if(selectedQuality >= 0 && selectedQuality < movieData.downloadUrl.length) {
                                
                                     const selectedQ = movieData.downloadUrl[selectedQuality];
                                     var size = selectedQ.size;
                            
                                try{

                                    await conn.sendMessage(fromOpt, { react: { text: '‚¨á', key: mekOpt.key } });

                                    size = parseFloat(size.replace('GB', '').replace('MB', ''));
                                    if (!isNaN(size)) {
                                    if (q.includes('GB') && size >= config.MAX_SIZE_GB) {
                                    return reply(`*The file is too large to download ‚õî*\n\n` +
                                    `üîπ Your current *MAX_SIZE_GB* limit: *${config.MAX_SIZE_GB}GB* üìè\n` +
                                    `üîπ To change this limit, use the *${prefix}apply* command.`);
                                     }
                                    if (q.includes('MB') && size >= config.MAX_SIZE) {
                                    return reply(`*The file is too large to download ‚õî*\n\n` +
                                    `üîπ Your current *MAX_SIZE* limit: *${config.MAX_SIZE}MB* üìè\n` +
                                    `üîπ To change this limit, use the *${prefix}apply* command.`);
                                    }}
                                    
                        
                                    const anu = await (await fetch(`${baseUrl}/api/movie/cinesubz/download?url=${selectedQ.link}&apikey=${apiKey}`)).json(); 

                                    if (!anu.data) {
                                    const error = await conn.sendMessage(from, { text: notFoundMg }, { quoted: mek })
                                    await conn.sendMessage(from, { react: { text: errorReact, key: error.key } });
                                    return
                                     }
                          
                                    if (anu.data.download.gdrive || anu.data.download.gdrive2) {
                                    await uploadFile(anu.data.download.gdrive || anu.data.download.gdrive2, "gdrive", fromOpt, jid, movieData.title, selectedQ.quality, mekOpt, conn);
                                    } else if (anu.response.direct) {
                                    await uploadFile(anu.data.download.direct, "direct", fromOpt, jid, movieData.title, selectedQ.quality, mekOpt, conn);
                                    } else if (anu.response.mega) {
                                    await uploadFile(anu.data.download.mega, "mega", fromOpt, jid, movieData.title, selectedQ.quality, mekOpt, conn);
                                    } else {
                                    await reply(notFoundMg);
                                    }
                        
                                } catch(e) {
                                        console.log(e)
                                        const em = await conn.sendMessage(from, { text: errorMg }, { quoted: mekOpt });
                                        await conn.sendMessage(from, { react: { text: '‚ùå', key: em.key } });
                                }
                              
                            } else {
                                await reply(invalidReply);
                            }
                        }
                    });
                  } else {
                    await reply(invalidReply);
                }
                     
            } catch (e) {
                  console.log(e)
                  const em = await conn.sendMessage(from, { text: errorMg }, { quoted: mekInfo });
                  await conn.sendMessage(from, { react: { text: '‚ùå', key: em.key } });
            }}
        });

    } catch (e) {
    console.log(e)
    const em = await conn.sendMessage(from, { text: errorMg }, { quoted: mek });
    await conn.sendMessage(from, { react: { text: '‚ùå', key: em.key } });
    }
});
